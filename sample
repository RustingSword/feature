version: 1
feature {
  type: INT
  name: "age"
  validator {
    int_min: 0
    int_max: 99
  }
  transformer {
    clip {
      int_min_value: 20
      int_max_value: 30
    }
  }
  desc: "user\'s age"
  lifecycle_stage: ALPHA
}
feature {
  type: INT
  name: "sex"
  validator {
    one_of_int: 0
    one_of_int: 1
    one_of_int: 2
  }
  desc: "user\'s sex"
  lifecycle_stage: BETA
}
feature {
  type: INT
  name: "deprecated_feature"
  desc: "deprecated feature example"
  lifecycle_stage: DEPRECATED
}
feature {
  type: STRING
  name: "city"
  validator {
    one_of_string: "北京"
    one_of_string: "上海"
    one_of_string: "广州"
    one_of_string: "深圳"
    max_missing_ratio: 0.10000000149
  }
  transformer {
    hash_by_md5 {
    }
  }
  desc: "user\'s city"
}
feature {
  type: DENSE
  name: "embedding"
  validator {
    dense_value_dim: 3
  }
  desc: "some embedding feature"
  lifecycle_stage: PRODUCTION
}
feature {
  type: DENSE
  name: "random"
  desc: "random dense feature"
}
feature {
  type: SPARSE
  name: "ntags"
  desc: "tags of news"
}
feature {
  type: SPARSE
  name: "utags"
  desc: "tags of user"
}
feature {
  type: FLOAT
  name: "ctr"
  validator {
    float_min: 0.0
    float_max: 1.0
  }
  transformer {
    discretize {
      discretize_level: 10
    }
  }
  desc: "ctr of news"
}
feature {
  type: CROSS
  name: "intermediate_X_ntags_X_utags"
  validator {
    int_min: 0
    int_max: 2000
    phase: AFTER_TRANSFORM
  }
  dependency_feature: "intermediate"
  dependency_feature: "ntags"
  dependency_feature: "utags"
  desc: "a cross feature example"
}
feature {
  type: CROSS
  name: "embedding_X_random"
  validator {
    int_min: 0
    int_max: 2000
    phase: AFTER_TRANSFORM
  }
  cross_value {
    cross_method: COSINE_SIMILARITY
  }
  dependency_feature: "embedding"
  dependency_feature: "random"
  desc: "another cross feature example"
}
feature {
  type: SPARSE
  name: "intermediate"
  is_intermediate_feature: true
  desc: "some intermediate feature"
}

features in topological order: [u'deprecated_feature', u'embedding', u'ntags', u'intermediate', u'sex', u'random', u'embedding_X_random', u'age', u'ctr', u'utags', u'intermediate_X_ntags_X_utags', u'city']
statistics to be collected: defaultdict(<type 'list'>, {u'city': ['missing_ratio'], u'ctr': ['bucket_info']})
